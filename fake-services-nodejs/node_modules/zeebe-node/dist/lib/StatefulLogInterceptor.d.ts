import { Characteristics, State } from './ConnectionFactory';
import { ZBLoggerConfig } from './interfaces';
import { ZBLogger } from './ZBLogger';
export declare class StatefulLogInterceptor {
    characteristics: Characteristics;
    log: ZBLogger;
    blocking: boolean;
    state: State;
    errors: never[];
    logs: never[];
    initialConnection: boolean;
    private blockingTimer?;
    constructor({ characteristics, logConfig, }: {
        characteristics: Characteristics;
        logConfig: ZBLoggerConfig;
    });
    close(): void;
    logError: (err: any) => void;
    logInfo: (msg: any) => void;
    logDebug: (msg: any, ...args: any[]) => void;
    logDirect: (msg: any) => false | void;
    connectionError: () => void;
    ready: () => void;
    private emptyErrors;
    private emptyLogs;
    private wrap;
    private info;
    private error;
}
