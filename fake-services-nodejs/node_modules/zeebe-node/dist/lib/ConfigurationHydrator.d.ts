/// <reference types="node" />
import { CustomSSL } from './GrpcClient';
import { Loglevel, ZBClientOptions } from './interfaces-published-contract';
import { OAuthProviderConfig } from './OAuthProvider';
export declare class ConfigurationHydrator {
    static ENV: () => {
        ZEEBE_NODE_LOG_LEVEL: string;
        ZEEBE_GATEWAY_ADDRESS: string;
        ZEEBE_ADDRESS: string;
        ZEEBE_CLIENT_ID: string;
        ZEEBE_CLIENT_SECRET: string;
        ZEEBE_SECURE_CONNECTION: string;
        ZEEBE_TOKEN_AUDIENCE: string;
        ZEEBE_AUTHORIZATION_SERVER_URL: string;
        ZEEBE_CAMUNDA_CLOUD_CLUSTER_ID: string;
        ZEEBE_BASIC_AUTH_PASSWORD: string;
        ZEEBE_BASIC_AUTH_USERNAME: string;
        ZEEBE_NODE_EAGER_CONNECT: string;
        ZEEBE_CLIENT_RETRY: string;
        ZEEBE_CLIENT_MAX_RETRIES: string;
        ZEEBE_CLIENT_MAX_RETRY_TIMEOUT: string;
        ZEEBE_CLIENT_SSL_ROOT_CERTS_PATH: string;
        ZEEBE_CLIENT_SSL_PRIVATE_KEY_PATH: string;
        ZEEBE_CLIENT_SSL_CERT_CHAIN_PATH: string;
    };
    static configure(gatewayAddress: string | undefined, options: ZBClientOptions | undefined): {
        retry: boolean;
        maxRetries: number | undefined;
        maxRetryTimeout: import("typed-duration").MaybeTimeDuration | undefined;
        eagerConnection: boolean;
        useTLS: any;
        connectionTolerance?: import("typed-duration").MaybeTimeDuration | undefined;
        loglevel?: Loglevel | undefined;
        stdout?: import("./interfaces-published-contract").ZBCustomLogger | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        logNamespace?: string | undefined;
        longPoll?: import("typed-duration").MaybeTimeDuration | undefined;
        pollInterval?: import("typed-duration").MaybeTimeDuration | undefined;
        camundaCloud?: import("./interfaces-published-contract").CamundaCloudConfig | undefined;
        hostname: string;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        customSSL?: CustomSSL | undefined;
        url?: string | undefined;
        audience?: string | undefined;
        clientId?: string | undefined;
        clientSecret?: string | undefined;
        cacheOnDisk?: boolean | undefined;
        cacheDir?: string | undefined;
        password?: string | undefined;
        username?: string | undefined;
        rootCerts?: Buffer | undefined;
        privateKey?: Buffer | undefined;
        certChain?: Buffer | undefined;
        verifyOptions?: import("@grpc/grpc-js/build/src/channel-credentials").VerifyOptions | undefined;
    } | {
        retry: boolean;
        maxRetries: number | undefined;
        maxRetryTimeout: import("typed-duration").MaybeTimeDuration | undefined;
        eagerConnection: boolean;
        useTLS: any;
        connectionTolerance?: import("typed-duration").MaybeTimeDuration | undefined;
        loglevel?: Loglevel | undefined;
        stdout?: import("./interfaces-published-contract").ZBCustomLogger | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        logNamespace?: string | undefined;
        longPoll?: import("typed-duration").MaybeTimeDuration | undefined;
        pollInterval?: import("typed-duration").MaybeTimeDuration | undefined;
        camundaCloud?: import("./interfaces-published-contract").CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        customSSL?: CustomSSL | undefined;
        url?: string | undefined;
        audience?: string | undefined;
        clientId?: string | undefined;
        clientSecret?: string | undefined;
        cacheOnDisk?: boolean | undefined;
        cacheDir?: string | undefined;
        password?: string | undefined;
        username?: string | undefined;
        rootCerts?: Buffer | undefined;
        privateKey?: Buffer | undefined;
        certChain?: Buffer | undefined;
        verifyOptions?: import("@grpc/grpc-js/build/src/channel-credentials").VerifyOptions | undefined;
    } | {
        retry: boolean;
        maxRetries: number | undefined;
        maxRetryTimeout: import("typed-duration").MaybeTimeDuration | undefined;
        eagerConnection: boolean;
        useTLS: any;
        connectionTolerance?: import("typed-duration").MaybeTimeDuration | undefined;
        loglevel?: Loglevel | undefined;
        stdout?: import("./interfaces-published-contract").ZBCustomLogger | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        logNamespace?: string | undefined;
        longPoll?: import("typed-duration").MaybeTimeDuration | undefined;
        pollInterval?: import("typed-duration").MaybeTimeDuration | undefined;
        camundaCloud?: import("./interfaces-published-contract").CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        customSSL?: CustomSSL | undefined;
        url?: string | undefined;
        audience?: string | undefined;
        clientId?: string | undefined;
        clientSecret?: string | undefined;
        cacheOnDisk?: boolean | undefined;
        cacheDir?: string | undefined;
        password?: string | undefined;
        username?: string | undefined;
        rootCerts?: Buffer | undefined;
        privateKey?: Buffer | undefined;
        certChain?: Buffer | undefined;
        verifyOptions?: import("@grpc/grpc-js/build/src/channel-credentials").VerifyOptions | undefined;
    } | {
        retry: boolean;
        maxRetries: number | undefined;
        maxRetryTimeout: import("typed-duration").MaybeTimeDuration | undefined;
        eagerConnection: boolean;
        useTLS: any;
        connectionTolerance?: import("typed-duration").MaybeTimeDuration | undefined;
        loglevel?: Loglevel | undefined;
        stdout?: import("./interfaces-published-contract").ZBCustomLogger | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        logNamespace?: string | undefined;
        longPoll?: import("typed-duration").MaybeTimeDuration | undefined;
        pollInterval?: import("typed-duration").MaybeTimeDuration | undefined;
        camundaCloud?: import("./interfaces-published-contract").CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        customSSL?: CustomSSL | undefined;
        url?: string | undefined;
        audience?: string | undefined;
        clientId?: string | undefined;
        clientSecret?: string | undefined;
        cacheOnDisk?: boolean | undefined;
        cacheDir?: string | undefined;
        password?: string | undefined;
        username?: string | undefined;
        rootCerts?: Buffer | undefined;
        privateKey?: Buffer | undefined;
        certChain?: Buffer | undefined;
        verifyOptions?: import("@grpc/grpc-js/build/src/channel-credentials").VerifyOptions | undefined;
    };
    static readonly getLogLevelFromEnv: () => Loglevel | undefined;
    private static readonly DEFAULT_GATEWAY_PORT;
    private static readonly CAMUNDA_CLOUD_AUTH_SERVER;
    private static readonly getClientIdFromEnv;
    private static readonly getZeebeAddressFromEnv;
    private static readonly getClientSecretFromEnv;
    private static readonly getTlsFromEnv;
    private static readTLSFromEnvironment;
    private static readCustomSSLFromEnvironment;
    private static readOAuthFromEnvironment;
    private static readBasicAuthFromEnvironment;
    private static readCamundaClusterConfFromEnv;
    private static getGatewayFromEnvironment;
    private static decodeConnectionString;
    private static getCamundaCloudConfig;
    private static justClusterId;
    private static getEagerStatus;
    private static getRetryConfiguration;
}
