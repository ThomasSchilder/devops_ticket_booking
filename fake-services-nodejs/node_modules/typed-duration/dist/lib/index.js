"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns true if the argument is a typed duration object.
 * Also, acts as a type guard.
 *
 */
exports.isTypedDuration = (maybeTypedDuration) => typeof maybeTypedDuration === "object" &&
    (maybeTypedDuration === null || maybeTypedDuration === void 0 ? void 0 : maybeTypedDuration.valueType) === "TYPED_DURATION";
/**
 * Return the unwrapped number from any typed duration, regardless of its type
 */
exports.valueFrom = (time) => exports.isTypedDuration(time) ? time.value : time;
/**
 *
 * Return a string representation, with units. For example: `60000ms`
 */
exports.valueOf = (time, defaultUnit = "") => `${exports.valueFrom(time)}${exports.isTypedDuration(time) ? time.unit : defaultUnit}`;
const isSeconds = (maybeSeconds) => exports.isTypedDuration(maybeSeconds) && maybeSeconds.type === "SECONDS";
const isMilliseconds = (maybeMilliseconds) => exports.isTypedDuration(maybeMilliseconds) &&
    maybeMilliseconds.type === "MILLISECONDS";
const isMinutes = (maybeMinutes) => exports.isTypedDuration(maybeMinutes) && maybeMinutes.type === "MINUTES";
const isHours = (maybeHours) => exports.isTypedDuration(maybeHours) && maybeHours.type === "HOURS";
const isDays = (maybeDays) => exports.isTypedDuration(maybeDays) && maybeDays.type === "DAYS";
const isNumber = (maybeNumber) => typeof maybeNumber === "number";
const newSeconds = (time) => ({
    type: "SECONDS",
    value: time,
    valueType: "TYPED_DURATION",
    unit: "s",
});
function secondsOf(time) {
    return isSeconds(time)
        ? time
        : isNumber(time)
            ? newSeconds(time)
            : isMilliseconds(time)
                ? secondsOf(time.value / 1000)
                : isMinutes(time)
                    ? secondsOf(time.value * 60)
                    : isHours(time)
                        ? secondsOf(minutesOf(time))
                        : isDays(time)
                            ? secondsOf(minutesOf(hoursOf(time)))
                            : time;
}
exports.secondsOf = secondsOf;
const newMilliseconds = (time) => ({
    type: "MILLISECONDS",
    value: time,
    valueType: "TYPED_DURATION",
    unit: "ms",
});
function millisecondsOf(time) {
    return isMilliseconds(time)
        ? time
        : isNumber(time)
            ? newMilliseconds(time)
            : isSeconds(time)
                ? millisecondsOf(time.value * 1000)
                : isMinutes(time)
                    ? millisecondsOf(secondsOf(time))
                    : isHours(time)
                        ? millisecondsOf(secondsOf(minutesOf(time)))
                        : isDays(time)
                            ? millisecondsOf(secondsOf(minutesOf(hoursOf(time))))
                            : time;
}
exports.millisecondsOf = millisecondsOf;
const newMinutes = (time) => ({
    type: "MINUTES",
    value: time,
    valueType: "TYPED_DURATION",
    unit: "m",
});
function minutesOf(time) {
    return isMinutes(time)
        ? time
        : isNumber(time)
            ? newMinutes(time)
            : isMilliseconds(time)
                ? minutesOf(secondsOf(time))
                : isSeconds(time)
                    ? newMinutes(time.value / 60)
                    : isHours(time)
                        ? newMinutes(time.value * 60)
                        : isDays(time)
                            ? minutesOf(hoursOf(time))
                            : time;
}
exports.minutesOf = minutesOf;
const newHours = (time) => ({
    type: "HOURS",
    value: time,
    valueType: "TYPED_DURATION",
    unit: "h",
});
function hoursOf(time) {
    return isHours(time)
        ? time
        : isNumber(time)
            ? newHours(time)
            : isMilliseconds(time)
                ? hoursOf(minutesOf(secondsOf(time)))
                : isSeconds(time)
                    ? hoursOf(minutesOf(time))
                    : isMinutes(time)
                        ? hoursOf(time.value / 60)
                        : isDays(time)
                            ? hoursOf(time.value * 24)
                            : time;
}
exports.hoursOf = hoursOf;
const newDays = (time) => ({
    type: "DAYS",
    value: time,
    valueType: "TYPED_DURATION",
    unit: "d",
});
function daysOf(time) {
    return isDays(time)
        ? time
        : isNumber(time)
            ? newDays(time)
            : isMilliseconds(time)
                ? daysOf(hoursOf(minutesOf(secondsOf(time))))
                : isSeconds(time)
                    ? daysOf(hoursOf(minutesOf(time)))
                    : isMinutes(time)
                        ? daysOf(hoursOf(time))
                        : isHours(time)
                            ? daysOf(time.value / 24)
                            : time;
}
exports.daysOf = daysOf;
exports.numberFrom = (time) => exports.isTypedDuration(time) ? time.value : time;
exports.millisecondsFrom = (time) => isNumber(time)
    ? time
    : isMilliseconds(time)
        ? exports.numberFrom(time)
        : exports.millisecondsFrom(millisecondsOf(time));
exports.secondsFrom = (time) => isNumber(time)
    ? time
    : isSeconds(time)
        ? exports.numberFrom(time)
        : exports.secondsFrom(secondsOf(time));
exports.minutesFrom = (time) => isNumber(time)
    ? time
    : isMinutes(time)
        ? exports.numberFrom(time)
        : exports.minutesFrom(minutesOf(time));
exports.hoursFrom = (time) => isNumber(time)
    ? time
    : isHours(time)
        ? exports.numberFrom(time)
        : exports.hoursFrom(hoursOf(time));
exports.daysFrom = (time) => isNumber(time)
    ? time
    : isDays(time)
        ? exports.numberFrom(time)
        : exports.daysFrom(daysOf(time));
