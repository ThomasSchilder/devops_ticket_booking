name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main
    # paths:
    #   - 'booking-service-java/**/*.java' # This line is updated to monitor any Java file changes in the specified directory

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: ticket-booking-java
  ECS_SERVICE: booking-service
  ECS_CLUSTER: ticket-booking-application
  ECS_TASK_DEFINITION: .aws/booking-service-java-revision7.json
  CONTAINER_NAME: "booking-service-java"
  DOCKER_FILE_PATH: booking-service-java/Dockerfile
  ZEEBE_CLIENT_CLOUD_REGION_GIT: ${{ secrets.ZEEBE_CLIENT_CLOUD_REGION }}
  ZEEBE_CLIENT_CLOUD_CLUSTERID_GIT: ${{ secrets.ZEEBE_CLIENT_CLOUD_CLUSTERID }}
  ZEEBE_CLIENT_CLOUD_CLIENTID_GIT: ${{ secrets.ZEEBE_CLIENT_CLOUD_CLIENTID }}
  ZEEBE_CLIENT_CLOUD_CLIENTSECRET_GIT: ${{ secrets.ZEEBE_CLIENT_CLOUD_CLIENTSECRET }}
  SPRING_RABBITMG_ADRESSES_GIT: ${{ secrets.SPRING_RABBITMG_ADRESSES }}
  SPRING_RABBITMG_HOST_GIT: ${{ secrets.SPRING_RABBITMG_HOST }}
  SPRING_RABBITMG_USERNAME_GIT: ${{ secrets.SPRING_RABBITMG_USERNAME }}
  SPRING_RABBITMG_PORT_GIT: ${{ secrets.SPRING_RABBITMG_PORT }}
  SPRING_RABBITMG_PASSWORD_GIT: ${{ secrets.SPRING_RABBITMG_PASSWORD }}
  SPRING_RABBITMG_VIRTUAL_HOST_GIT: ${{ secrets.SPRING_RABBITMG_VIRTUAL_HOST }}
  SPRING_RABBITMG_SSL_ENABLED_GIT: ${{ secrets.SPRING_RABBITMG_SSL_ENABLED }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKER_FILE_PATH \
            --build-arg ZEEBE_CLIENT_CLOUD_REGION=$ZEEBE_CLIENT_CLOUD_REGION_GIT \
            --build-arg ZEEBE_CLIENT_CLOUD_CLUSTERID=$ZEEBE_CLIENT_CLOUD_CLUSTERID_GIT \
            --build-arg ZEEBE_CLIENT_CLOUD_CLIENTID=$ZEEBE_CLIENT_CLOUD_CLIENTID_GIT \
            --build-arg ZEEBE_CLIENT_CLOUD_CLIENTSECRET=$ZEEBE_CLIENT_CLOUD_CLIENTSECRET_GIT \
            --build-arg SPRING_RABBITMG_ADRESSES=$SPRING_RABBITMG_ADRESSES_GIT \
            --build-arg SPRING_RABBITMG_HOST=$SPRING_RABBITMG_HOST_GIT \
            --build-arg SPRING_RABBITMG_USERNAME=$SPRING_RABBITMG_USERNAME_GIT \
            --build-arg SPRING_RABBITMG_PORT=$SPRING_RABBITMG_PORT_GIT \
            --build-arg SPRING_RABBITMG_PASSWORD=$SPRING_RABBITMG_PASSWORD_GIT \
            --build-arg SPRING_RABBITMG_VIRTUAL_HOST=$SPRING_RABBITMG_VIRTUAL_HOST_GIT \
            --build-arg SPRING_RABBITMG_SSL_ENABLED=$SPRING_RABBITMG_SSL_ENABLED_GIT .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
